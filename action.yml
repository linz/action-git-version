name: Git Version
author: "Codacy"
description: "Semver versioning based on the git history and commit messages of your repository."
branding:
  icon: "git-branch"
  color: "gray-dark"
inputs:
  tool-version:
    description: "The version of the tool to be ran"
    required: true
    default: latest
  release-branch:
    description: "The name of the release branch"
    required: true
    default: master
  dev-branch:
    description: "The name of the dev branch"
    required: true
    default: dev
  skip-prerelease:
    description: "Skip prerelease part of the version. When true, release-branch and dev-branch are effectively ignored"
    required: true
    default: "false"
  minor-identifier:
    description: "The string or regex to identify a minor release commit"
    required: true
    default: "feature:"
  major-identifier:
    description: "The string or regex to identify a major release commit"
    required: true
    default: "breaking:"
  prefix:
    description: "The prefix to use in the version"
    required: false
  suffix:
    description: "The suffix to use in the version"
    required: false
  log-paths:
    description: "The paths to be used to calculate changes (comma-separated)"
    required: false
    default: ./
outputs:
  version:
    description: "The value of the new pre-calculated tag"
    value: ${{ steps.version.outputs.version }}
  previous-version:
    description: "Contains the value of previous tag, before calculating a new one"
    value: ${{ steps.previous-version.outputs.previous-version }}
runs:
  using: "composite"
  steps:
    - shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        set -eo pipefail
        TAG_OPT=""
        if [ "${{ inputs.tool-version }}" != "latest" ]; then
          TAG_OPT="${{ inputs.tool-version }}"
        fi
        sudo gh release download $TAG_OPT --repo linz/action-git-version --pattern git-version --dir /usr/local/bin/ --clobber
        sudo chmod +x /usr/local/bin/git-version

    - id: previous-version
      shell: bash
      run: |
        set -eo pipefail

        PREVIOUS_VERSION=$(git-version \
            --previous-version \
            --release-branch "${{ inputs.release-branch }}" \
            --dev-branch "${{ inputs.dev-branch }}" \
            ${{ inputs.skip-prerelease == 'true' && '--skip-prerelease' || '' }} \
            --minor-identifier="${{ inputs.minor-identifier }}" \
            --major-identifier="${{ inputs.major-identifier }}" \
            --version-prefix "${{ inputs.prefix }}" \
            --version-suffix "${{ inputs.suffix }}")

        echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
        echo "Previous Version: $PREVIOUS_VERSION"
    - id: version
      shell: bash
      run: |
        set -eo pipefail

        VERSION=$(git-version \
            --release-branch "${{ inputs.release-branch }}" \
            --dev-branch "${{ inputs.dev-branch }}" \
            ${{ inputs.skip-prerelease == 'true' && '--skip-prerelease' || '' }} \
            --skip-prerelease "${{ inputs.skip-prerelease }}" \
            --minor-identifier="${{ inputs.minor-identifier }}" \
            --major-identifier="${{ inputs.major-identifier }}" \
            --log-paths="${{ inputs.log-paths }}" \
            --version-prefix "${{ inputs.prefix }}" \
            --version-suffix "${{ inputs.suffix }}")

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "New Version: $VERSION"
